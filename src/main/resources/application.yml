spring:
  application:
    name: cinefinder

  profiles:
    active: ${PROFILE}

  datasource:
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  cache:
    type: redis
  data:
    redis:
      port: ${REDIS_EXTERNAL_PORT}

  jwt:
    secret: ${JWT_SECRET}
    expiration:
      access: ${JWT_EXPIRE_ACCESS}
      refresh: ${JWT_EXPIRE_REFRESH}

  rabbitmq:
    username: ${RABBITMQ_LOGIN}
    password: ${RABBITMQ_PASSWORD} #default Password
    host: localhost # default host
    port: ${RABBITMQ_PORT}      #default port

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - account_email
        provider:
          kakao:
            authorization-uri: "https://kauth.kakao.com/oauth/authorize"
            token-uri: "https://kauth.kakao.com/oauth/token"
            user-info-uri: "https://kapi.kakao.com/v2/user/me"
            user-name-attribute: id

#    oauth2.client:
#      registration:
#        google:
#          redirect-uri: "{baseUrl}/login/oauth2/code/google"
#          client-id: ${GOOGLE_CLIENT_ID}
#          client-secret: ${GOOGLE_CLIENT_SECRET}

api:
  kobis:
    request-url: ${KOBIS_REQUEST_URL}
    service-key: ${KOBIS_SERVICE_KEY}
  kmdb:
    request-url: ${KMDB_REQUEST_URL}
    service-key: ${KMDB_SERVICE_KEY}

movie:
  cgv:
    name: CGV
    main-url: https://m.cgv.co.kr/WebApp
    theater-default-endpoint: /TheaterV4/Default.aspx
    theater-detail-endpoint: /TheaterV4/TheaterDetail.aspx?tc=
  lotte:
    name: 롯데시네마
    main-url: https://www.lottecinema.co.kr
    theater-default-endpoint: /LCWS/Cinema/CinemaData.aspx
  mega:
    name: 메가박스
    main-url: https://www.megabox.co.kr
    theater-default-endpoint: /theater/list
    theater-detail-endpoint: /on/oh/ohc/Brch/infoPage.do

rabbitmq:
  websocket_endpoint: ${WEBSOCKET_ENDPOINT}
  user: ${RABBITMQ_LOGIN}
  password: ${RABBITMQ_PASSWORD}

# =========================== LOCAL  ===========================
---
spring.config.activate.on-profile: local

server:
  port: ${LOCAL_SERVER_PORT}

spring:
  datasource:
    url: jdbc:mysql://${LOCAL_HOST}:${MYSQL_EXTERNAL_PORT}/${MYSQL_DB_NAME}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8

  data:
    redis:
      host: ${LOCAL_HOST}

  elasticsearch:
    uris: http://${LOCAL_HOST}:${ES_EXTERNAL_PORT_1}/
    connection-timeout: 120s
    socket-timeout: 120s

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: false


# logging
logging-level:
  org.hibernate.SQL: debug
  org.hibernate.type: trace
  org.springframework.data.elasticsearch.client: debug

# =======================================  MAIN  =======================================
---
spring.config.activate.on-profile: main

server:
  port: ${MAIN_SERVER_PORT}

spring:
  datasource:
    url: jdbc:mysql://${MAIN_HOST}:${MYSQL_EXTERNAL_PORT}/${MYSQL_DB_NAME}?serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=UTF-8

  data:
    redis:
      host: ${MAIN_HOST}

  elasticsearch:
    uris: http://${MAIN_HOST}:${ES_EXTERNAL_PORT_1}/
    connection-timeout: 120s
    socket-timeout: 120s

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        use_sql_comments: false
---